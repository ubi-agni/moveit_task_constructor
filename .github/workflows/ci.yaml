# This config uses industrial_ci (https://github.com/ros-industrial/industrial_ci.git).
# For troubleshooting, see readme (https://github.com/ros-industrial/industrial_ci/blob/master/README.rst)

name: CI

on:
  workflow_dispatch:
  pull_request:
  push:

jobs:
  default:
    strategy:
      fail-fast: false
      matrix:
        env:
          - IMAGE: noetic-source
            CLANG_TIDY: pedantic
            TARGET_CMAKE_ARGS: >-
              -DCMAKE_BUILD_TYPE=Release
              -DCMAKE_CXX_FLAGS="-Werror -Wall -Wextra -Wwrite-strings -Wunreachable-code -Wpointer-arith -Wredundant-decls"

    env:
      CATKIN_LINT: true
      CLANG_TIDY_ARGS: -quiet -export-fixes ${{ github.workspace }}/.work/clang-tidy-fixes.yml
      DOCKER_IMAGE: moveit/moveit:${{ matrix.env.IMAGE }}
      UNDERLAY: /root/ws_moveit/install
      DOWNSTREAM_WORKSPACE: "github:ubi-agni/mtc_demos#master github:TAMS-Group/mtc_pour#master"
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      BASEDIR: ${{ github.workspace }}/.work
      CACHE_PREFIX: "${{ matrix.env.IMAGE }}${{ contains(matrix.env.TARGET_CMAKE_ARGS, '--coverage') && '-ccov' || '' }}"
      CC: ${{ matrix.env.CLANG_TIDY && 'clang' }}
      CXX: ${{ matrix.env.CLANG_TIDY && 'clang++' }}

    name: "${{ matrix.env.IMAGE }}${{ matrix.env.NAME && ' • ' || ''}}${{ matrix.env.NAME }}${{ matrix.env.CATKIN_LINT && ' • catkin_lint' || ''}}${{ matrix.env.CLANG_TIDY && ' • clang-tidy' || '' }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache ccache
        uses: rhaschke/cache@main
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ env.CACHE_PREFIX }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: |
            ccache-${{ env.CACHE_PREFIX }}-${{ github.sha }}
            ccache-${{ env.CACHE_PREFIX }}
        env:
          GHA_CACHE_SAVE: always

      - id: ici
        name: Run industrial_ci
        uses: rhaschke/industrial_ci@clang-tidy
        env: ${{ matrix.env }}

      - name: Adapt ${{ env.BASEDIR }}/clang-tidy-fixes.yml
        if: always() && matrix.env.CLANG_TIDY
        run: |
          cat ${{ env.BASEDIR }}/clang-tidy-fixes.yml

      - name: Show clang-tidy warnings
        if: always() && matrix.env.CLANG_TIDY
        uses: asarium/clang-tidy-action@v1
        with:
          fixesFile: ${{ env.BASEDIR }}/clang-tidy-fixes.yml

      - name: Process clang-tidy results
        if: always() && matrix.env.CLANG_TIDY && github.event_name == 'pull_request'
        uses: platisd/clang-tidy-pr-comments@master
        with:
          # The GitHub token (or a personal access token)
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # The path to the clang-tidy fixes generated previously
          clang_tidy_fixes: ${{ env.BASEDIR }}/clang-tidy-fixes.yml
          # Request changes in case warnings are found
          request_changes: true

      - name: Upload clang-tidy fixes (on failure)
        uses: actions/upload-artifact@v3
        if: failure() && (steps.ici.outputs.clang_tidy_checks)
        with:
          name: clang-tidy-fixes.yml
          path: ${{ env.BASEDIR }}/clang-tidy-fixes.yml

      - name: Upload test artifacts (on failure)
        uses: actions/upload-artifact@v3
        if: failure() && (steps.ici.outputs.run_target_test || steps.ici.outputs.target_test_results)
        with:
          name: test-results-${{ matrix.env.IMAGE }}
          path: ${{ env.BASEDIR }}/target_ws/**/test_results/**/*.xml
      - name: Generate codecov report
        uses: rhaschke/lcov-action@main
        if: contains(matrix.env.TARGET_CMAKE_ARGS, '--coverage') && steps.ici.outputs.target_test_results == '0'
        with:
          docker: $DOCKER_IMAGE
          workdir: ${{ env.BASEDIR }}/target_ws
          ignore: '"*/target_ws/build/*" "*/target_ws/install/*" "*/test/*"'
      - name: Upload codecov report
        uses: codecov/codecov-action@v3
        if: contains(matrix.env.TARGET_CMAKE_ARGS, '--coverage') && steps.ici.outputs.target_test_results == '0'
        with:
          files: ${{ env.BASEDIR }}/target_ws/coverage.info
